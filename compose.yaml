services:
  # caddy:
  #   image: "caddy:2.8.4-alpine"
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./Caddyfile:/etc/caddy/Caddyfile
  #     - caddy_config:/data

  postgres:
    image: "bitnami/postgresql:16"
    ports:
      - "5432:5432"
    environment:
      - POSTGRESQL_USERNAME=user
      - POSTGRESQL_PASSWORD=pass
      - POSTGRESQL_DATABASE=todos
    volumes:
      - "postgres_data:/bitnami/postgresql"

  # server:
  #   build:
  #     context: ./server
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - SERVER_DEBUG=False
  #     - SERVER_ENVIRONMENT=production
  #     - SERVER_HOST=0.0.0.0
  #     - SERVER_PORT=8000
  #     - SERVER_LOG_LEVEL=INFO
  #     - SERVER_CORS_ALLOW_ORIGINS=["http://localhost", "http://127.0.0.1", "https://localhost", "https://127.0.0.1"]
  #     - SERVER_DATABASE_URL=postgresql+asyncpg://user:pass@postgres:5432/todos
  #     - SERVER_DATABASE_POOL_SIZE=20
  #     - SERVER_ROOT_PATH="/api"
  #   depends_on:
  #     - postgres

  # client:
  #   image: client
  #   build:
  #     context: ./client
  #   environment:
  #     NODE_ENV: production
  #     VITE_API_URL: "https://localhost/api/graphql"
  #   ports:
  #     - 3000:3000
  #   depends_on:
  #     - server

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
    container_name: elasticsearch
    restart: always
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
      - ELASTIC_PASSWORD=changeme
      - xpack.security.enabled=true
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      interval: 10s
      retries: 12
      test: curl -s http://localhost:9200/_cluster/health | grep -vq
        '"status":"red"'

  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.2
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9200"
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: changeme
    restart: always
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - 127.0.0.1:5601:5601

  apm-server:
    image: docker.elastic.co/apm/apm-server:7.16.2
    container_name: apm-server
    user: apm-server
    restart: always
    command:
      [
        "--strict.perms=false",
        "-e",
        "-E",
        "apm-server.host=0.0.0.0:8200",
        "-E",
        "apm-server.kibana.enabled=true",
        "-E",
        "apm-server.kibana.host=kibana:5601",
        "-E",
        "apm-server.kibana.username=elastic",
        "-E",
        "apm-server.kibana.password=changeme",
        "-E",
        "output.elasticsearch.hosts=['elasticsearch:9200']",
        "-E",
        "output.elasticsearch.enabled=true",
        "-E",
        "output.elasticsearch.username=elastic",
        "-E",
        "output.elasticsearch.password=changeme",
      ]
    depends_on:
      elasticsearch:
        condition: service_healthy
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    healthcheck:
      interval: 10s
      retries: 12
      test:
        curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null
        http://localhost:8200/

  otel-collector:
    image: otel/opentelemetry-collector:0.41.0
    container_name: otel-collector
    restart: always
    command: "--config=/etc/otel-collector-config.yaml"
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    depends_on:
      apm-server:
        condition: service_healthy
    ports:
      - 127.0.0.1:4317:4317

volumes:
  postgres_data:
  caddy_config:
  elasticsearch-data:
