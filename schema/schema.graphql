type Answer implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime
}

type AnswerConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [AnswerEdge!]!
}

"""An edge in a connection."""
type AnswerEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Answer!
}

type AuditLog implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  tableName: String!
  operation: String!
  rowId: Int!
  oldData: JSON
  newData: JSON
  createdAt: DateTime!
}

type AuditLogConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [AuditLogEdge!]!
}

"""An edge in a connection."""
type AuditLogEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: AuditLog!
}

type CreateAnswerPayload {
  answerEdge: AnswerEdge!
  question: Question!
}

type CreateQuestionPayload {
  questionEdge: QuestionEdge!
}

"""Date with time (isoformat)"""
scalar DateTime

union DeleteQuestionPayload = Question | QuestionNotFoundError

union DeleteQuestionVotePayload = Question | QuestionNotFoundError

interface Error {
  message: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
"""
scalar JSON @specifiedBy(url: "https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf")

type Mutation {
  """Create a new question."""
  createQuestion(
    """The title of the question."""
    title: String!

    """The title of the question."""
    description: String!
  ): CreateQuestionPayload!

  """Delete a question by ID."""
  deleteQuestion(
    """The ID of the question to delete."""
    questionId: ID!
  ): DeleteQuestionPayload!

  """Upvote a question."""
  voteQuestion(
    """The ID of the question to vote for."""
    questionId: ID!

    """The type of vote to cast."""
    voteType: VoteType!
  ): VoteQuestionPayload!

  """Delete a question vote."""
  deleteQuestionVote(
    """The ID of the question to remove the vote for."""
    questionId: ID!
  ): DeleteQuestionVotePayload!

  """Create a new answer."""
  createAnswer(
    """The content of the answer."""
    content: String!

    """The ID of the question to create the answer under."""
    questionId: ID!
  ): CreateAnswerPayload!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  id: ID!
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  node(
    """The ID of the object."""
    id: ID!
  ): Node

  """Get all questions available."""
  questions(before: ID = null, after: ID = null, first: Int = null, last: Int = null): QuestionConnection!

  """Get the current user."""
  viewer: User!

  """Get all audit logs available."""
  auditLogs(before: ID = null, after: ID = null, first: Int = null, last: Int = null): AuditLogConnection!
}

type Question implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  title: String!
  description: String!
  answersCount: Int!
  votesCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  descriptionPreview: String!
  currentUserVote: VoteType
  answers(before: ID = null, after: ID = null, first: Int = null, last: Int = null): AnswerConnection!
}

type QuestionConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [QuestionEdge!]!
}

"""An edge in a connection."""
type QuestionEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Question!
}

type QuestionNotFoundError implements Error {
  message: String!
}

type User implements Node {
  """The Globally Unique ID of this object"""
  id: ID!
  username: String!
  createdAt: DateTime!
  updatedAt: DateTime
}

union VoteQuestionPayload = Question | QuestionNotFoundError

enum VoteType {
  UPVOTE
  DOWNVOTE
}